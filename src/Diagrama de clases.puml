@startuml
'https://plantuml.com/sequence-diagram
!pragma layout smetana
set separator none

package cl.ucn.disc.pa.taller3 {
    package modelo {

        abstract class Funcion <<abstract>> {
            # codigo: int
            # nombre: String
            # duracion: int
            # precio: int
            # horario: String
            # asientos: String[]
            # asientosDisponibles: int
            # disponible: boolean
            + Funcion(codigo: int, nombre: String, duracion: int, precio: int,
            horario: String)
            + gets y sets()
            }
        class Pelicula {

            - genero: String
            - nominadaAlOscar: boolean

            + Pelicula(codigo: int, nombre: String, duracion: int, precio: int,
                           horario: String, genero: String, horario: String)
            + gets y sets()
            }

        class ObraDeTeatro{
            - autor: String
            - cantidadDeActos: int

            + ObraDeTeatro(codigo: int, nombre: String, duracion: int, precio: int,
                                   horario: String, autor: String, cantidadDeActos: int)
            + toString(): String
            + gets y sets()
        }

        class Documental{
            - tema: String
            - anioProduccion: int

            + Documental(codigo: int, nombre: String, duracion: int, precio: int,
                               horario: String, tema: String, anioProduccion: int)
            + gets y sets()
        }

        class Usuario{
            - rut: String
            - contrasenia: String
            - membresia: boolean

            + Usuario(rut: String, contrasenia: String)
            + gets y sets()
        }

        package colecciones {

        abstract class Contenedor{
            # listaElementos: Elemento[]
            # cantMaxima: int
            # cantActual: int


            + Contenedor(cantMax: int)
            + agregar(Elemento elemento): boolean
            + obtener(posicion: int): Elemento
            + gets()
        }

        class ContenedorUsuarios{
            + ContenedorUsuarios(cantMax: int)
            + buscar(tipoBusqueda: String, referencia: String): int[]
            }

         class ContenedorFunciones{
            + obtenerUsuario(rut: String): Usuario
            }
        }
    }

    package Infraestructura {
        class Vista {
        - sistema: ISistemaTeatro

        + Vista(sistema: ISistemaTeatro)
        + init(): void
        - menuPrincipal(): void
        - opcion1(): void
        - opcion2(): void
        - opcion3(): void
        - iniciarSesion(): boolean
        - registrarse(): boolean

        }

        interface ISistemaTeatro <<interface>> {
            + lecturaDeDocumentos(): boolean
        	+ iniciarSesion(rut: String, contrasenia: String): boolean
        	+ registrarse(rut: String, contrasenia: String): boolean
        	+ cerrarSesion(): void
        	+ comprarEntrada(cantEntradas: int,asientosComprados: int[], codigoFuncion: String): boolean
        	+ verAsientos(codigoFuncion: String): String
        	+ verFuncionesDisponibles(): String
        	+ buscarFuncion(opcionDeBusqueda: String, referencia: String, tipoDato: String): String
        	+ returnUsuario(): Usuario
        }
    }

    package servicios {

        class SistemaFunciones {
            - listaUsuarios: ContenedorUsuarios
            - usuarioActivo: Usuario
            + SistemaFunciones()
        }
    }

    Pelicula ---|> Funcion
    ObraDeTeatro ---|> Funcion
    Documental ---|> Funcion

    SistemaFunciones ...|> ISistemaTeatro
    Vista "1" *--- "1" ISistemaTeatro

    Usuario ...|> Elemento
    Funcion ...|> Elemento

    Elemento ---o Contenedor

    ContenedorUsuarios ---|> Contenedor
    ContenedorFunciones ---|> Contenedor



}
@enduml